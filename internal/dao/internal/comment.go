// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CommentDao is the data access object for table comment.
type CommentDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns CommentColumns // columns contains all the column names of Table for convenient usage.
}

// CommentColumns defines and stores column names for table comment.
type CommentColumns struct {
	Id              string //
	Nickname        string // 昵称
	Email           string // 邮箱
	Content         string // 评论内容
	Avatar          string // 头像(图片路径)
	CreateTime      string // 评论时间
	Ip              string // 评论者ip地址
	IsPublished     string // 公开或回收站
	IsAdminComment  string // 博主回复
	Page            string // 0普通文章，1关于我页面，2友链页面
	IsNotice        string // 接收邮件提醒
	BlogId          string // 所属的文章
	ParentCommentId string // 父评论id，-1为根评论
	Website         string // 个人网站
	Qq              string // 如果评论昵称为QQ号，则将昵称和头像置为QQ昵称和QQ头像，并将此字段置为QQ号备份
}

//  commentColumns holds the columns for table comment.
var commentColumns = CommentColumns{
	Id:              "id",
	Nickname:        "nickname",
	Email:           "email",
	Content:         "content",
	Avatar:          "avatar",
	CreateTime:      "create_time",
	Ip:              "ip",
	IsPublished:     "is_published",
	IsAdminComment:  "is_admin_comment",
	Page:            "page",
	IsNotice:        "is_notice",
	BlogId:          "blog_id",
	ParentCommentId: "parent_comment_id",
	Website:         "website",
	Qq:              "qq",
}

// NewCommentDao creates and returns a new DAO object for table data access.
func NewCommentDao() *CommentDao {
	return &CommentDao{
		group:   "default",
		table:   "comment",
		columns: commentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CommentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CommentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CommentDao) Columns() CommentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CommentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CommentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CommentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
